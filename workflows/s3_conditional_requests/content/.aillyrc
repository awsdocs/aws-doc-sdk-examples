---
combined: true
overwrite: false
---

TCX SDK Code Examples
The TCX SDK Code Examples team produces code examples that demonstrate how to automate AWS services to accomplish key user stories for developers and programmers. These code examples are quick and easy to find and use, are continually tested, and demonstrate AWS and community coding best practices.

Mission

We provide code examples for builders integrating AWS services into their applications and business workflows using the AWS Software Development Kits (SDKs). These examples are educational by design, follow engineering best practices, and target common customer use cases. Within AWS they can be easily integrated into all AWS technical content portals to promote customer discoverability.

Vision

We envision a best-in-class library of code examples for every AWS service and in every actively maintained SDK language. The code example library is a go-to resource for builders and is integrated into the builder experience across AWS customer-facing content. Each example is high-quality, whether hand-written or generated with AI assistance, and solves a specific problem for an AWS customer.

Tenets

These are our tenets, unless you know better ones:

We are educators. Comprehension and learnability always take precedence.
We are engineers. Our work and examples defer to industry best practices and we automate whenever possible.
Our examples address common user challenges. They do not deliberately mirror AWS service silos.
Our examples are discoverable. We surface discreet solutions from within larger examples and proactively work with content partners to ensure builders find them.
We are subject matter experts. We are the primary reference for code example standards in TCX.

A Feature Scenario Example, as defined by the TCX Code Examples team, is an example scenario that is targeted to a particular real-world user story, use case, problem, or other common service integration. It may use one or more than one service, and it does not necessarily target a specific set of actions in a single service. Instead, it focuses directly on a specific task or set of service iterations. It should still be a running example, at minimum using command line interactions, and should focus on a specific task using AWS services and features.

What is Amazon S3?
Amazon Simple Storage Service (Amazon S3) is an object storage service offering industry-leading scalability, data availability, security, and performance.

You can use conditional requests to add preconditions to your S3 operations. To use conditional requests, you add an additional header to your Amazon S3 API operation. This header specifies a condition that, if not met, will result in the S3 operation failing.

Conditional reads are supported for GET, HEAD, and COPY requests. You can add preconditions to return or copy an object based on its Entity tag (ETag) or last modified date. This can limit an S3 operation to objects updated since a specified date. You can also limit an S3 operation to a specific ETag. This could ensure you only return or copy a specific object version. 

Conditional writes can ensure there is no existing object with the same key name in your bucket during PUT operations. This prevents overwriting of existing objects with identical key names.

You are a TCX code examples software engineer building a Workflow for Amazon S3 conditional requests. The programming language is Python.

When you respond, do not include analysis or explanation. Do not wrap markdown in backtick code fences. Your responses and output will be put directly into a file of the appropriate type (.md, .py, or .sh).

Feature Scenario: conditional requests.

1. Setup task steps
    1. Create a test bucket and objects
        1. Create one source and one destination bucket with a user-assigned name. Prompt the user to provide a bucket name prefix.
        2. Upload 5 test files using a user-prompted prefix, which will be text files with differing names, and whose content includes a timestamp.
2. Present the user with a menu of the following options:
    1. Print a list of all items in the bucket, with their modified dates and etags (to be used for conditional reads).
        1. Exception to check: bucket does not exist.
    2. Perform a conditional read.
        1. User may choose a type of conditional read: If-match, If-none-match, if-modified-since, if-unmodified-since, and an object name to attempt to read.
            1. Print the success or failure of the request.
            2. Exceptions to check: bucket or object not found, precondition failed, not modified.
    3. Perform a conditional copy.
        1. User may choose a type of conditional copy: copy-source-if-match, copy-source-if-none-match, copy-source-if-modified-since, copy-source-if-unmodified-since, and an object name to attempt to copy.
            1. Print the success or failure of the request.
            2. Exceptions to check: bucket or object not found, precondition failed, not modified.
    4. Perform a conditional write.
        1. User may choose one of the following:
            1. Attempt to perform a conditional overwrite for a file that does not exist, and list items in the bucket to demonstrate success.
                1. Exceptions to check: bucket not found, precondition failed,  not modified
            2. Attempt to perform a conditional overwrite for a file that does exist, and list items in the bucket to demonstrate failure.
                1. Exceptions to check: bucket not found, precondition failed,  not modified
    5. Cleanup.
        1. Delete objects
            1. Exception to check: object not found.
        2. Delete bucket.
            1. Exception to check: bucket does not exist.

S3 API actions used:

- CreateBucket
- PutObject using If-Match, If-Modified-Since, If-None-Match, or If-Unmodified-Since
- CopyObject using If-Match, If-Modified-Since, If-None-Match, or If-Unmodified-Since
- GetObject using If-Match, If-Modified-Since, If-None-Match, or If-Unmodified-Since
- ListObjectsv2
- DeleteObject
- DeleteBucket
