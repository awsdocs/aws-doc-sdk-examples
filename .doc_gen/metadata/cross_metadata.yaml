# zexi 0.4.0
cross_MessageProcessingFrameworkTutorial:
  title: Use the &AWS; Message Processing Framework for .NET to publish and receive &SQS; messages
  title_abbrev: Use the &AWS; Message Processing Framework for .NET with &SQS;
  synopsis: create applications that publish and receive &SQS; messages using the &AWS; Message Processing Framework for .NET.
  category: Cross-service examples
  languages:
    .NET:
      versions:
        - sdk_version: 3
          github: dotnetv3/cross-service/MessageProcessingFramework
          block_content: cross_MessageProcessingFramework_Net_block.xml
  service_main: sqs
  services:
    sqs:
cross_FSA:
  title: Create an application that analyzes customer feedback and synthesizes audio
  title_abbrev: Create an application to analyze customer feedback
  synopsis: create an application that analyzes customer comment cards, translates them from their original language, determines
    their sentiment, and generates an audio file from the translated text.
  languages:
    .NET:
      versions:
        - sdk_version: 3
          github: dotnetv3/cross-service/FeedbackSentimentAnalyzer
          block_content: cross_FSA_NetV3_block.xml
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_FSA_Java_block.xml
    Ruby:
      versions:
        - sdk_version: 3
          block_content: cross_FSA_Ruby_block.xml
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_FSA_JavaScript_block.xml
  service_main: textract
  services:
    lambda:
    textract:
    comprehend:
    translate:
    polly:
cross_PAM:
  title: Create a photo asset management application that lets users manage photos using labels
  title_abbrev: Create a serverless application to manage photos
  synopsis: create a serverless application that lets users manage photos using labels.
  languages:
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_PAM_Java_block.xml
    Kotlin:
      versions:
        - sdk_version: 1
          block_content: cross_PAM_Kotlin_block.xml
    .NET:
      versions:
        - sdk_version: 3
          github: dotnetv3/cross-service/PhotoAssetManager
          block_content: cross_PAM_dotnet_block.xml
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_PAM_JavaScript_block.xml
    PHP:
      versions:
        - sdk_version: 3
          github: php/applications/photo_asset_manager
          block_content: cross_PAM_PHP_block.xml
    Rust:
      versions:
        - sdk_version: 1
          block_content: cross_PAM_rust_block.xml
    C++:
      versions:
        - sdk_version: 1
          github: cpp/example_code/cross-service/photo_asset_manager
          block_content: cross_PAM_cpp_block.xml
  service_main: rekognition
  services:
    sns:
    s3:
    dynamodb:
    rekognition:
    lambda:
    api-gateway:
cross_RedshiftDataTracker:
  title: Create an &RSlong; item tracker
  title_abbrev: Create a web application to track &RS; data
  synopsis: create a web application that tracks and reports on work items using an &RSlong; database.
  languages:
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_RedshiftDataTracker_Java_block.xml
    Kotlin:
      versions:
        - sdk_version: 1
          block_content: cross_RedshiftDataTracker_Kotlin_block.xml
  service_main: redshift
  services:
    redshift:
    ses:
cross_SQSMessageApp:
  title: Create a web application that sends and retrieves messages by using &SQS;
  title_abbrev: Create a messaging application
  synopsis: create a messaging application by using &SQS;.
  languages:
    Kotlin:
      versions:
        - sdk_version: 1
          block_content: cross_SQSMessage_Kotlin_block.xml
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_SQSMessage_Java_block.xml
  service_main: sqs
  services:
    sqs:
    comprehend:
cross_RDSDataTracker:
  title: Create an &AUR; Serverless work item tracker
  title_abbrev: Create an &AUR; Serverless work item tracker
  synopsis: create a web application that tracks work items in an &AURlong; Serverless database and uses &SESlong; (&SES;)
    to send reports.
  languages:
    .NET:
      versions:
        - sdk_version: 3
          github: dotnetv3/cross-service/AuroraItemTracker
          block_content: cross_RDSDataTracker_Net_block.xml
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_RDSDataTracker_Java_block.xml
    Kotlin:
      versions:
        - sdk_version: 1
          block_content: cross_RDSDataTracker_Kotlin_block.xml
    PHP:
      versions:
        - sdk_version: 3
          block_content: cross_RDSDataTracker_PHP_block.xml
    Python:
      versions:
        - sdk_version: 3
          github: python/cross_service/aurora_item_tracker
          block_content: cross_RDSDataTracker_Python_block.xml
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_RDSDataTracker_JavaScriptV3_block.xml
    C++:
      versions:
        - sdk_version: 1
          github: cpp/example_code/cross-service/serverless-aurora
          block_content: cross_RDSDataTracker_cpp_block.xml
  service_main: aurora
  services:
    aurora:
    rds:
    rds-data:
    ses:
cross_SnsPublishSubscription:
  title: Build a publish and subscription application that translates messages
  title_abbrev: Building an &SNS; application
  synopsis: create an application that has subscription and publish functionality and translates messages.
  languages:
    Kotlin:
      versions:
        - sdk_version: 1
          block_content: cross_SNSSubPub_Kotlin_block.xml
    .NET:
      versions:
        - sdk_version: 3
          github: dotnetv3/cross-service/SubscribePublishTranslate
          block_content: cross_SNSSubPub_Net_block.xml
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_SNSSubPub_Java_block.xml
  service_main: translate
  services:
    sns:
    translate:
cross_LexChatbotLanguages:
  title: Create an &LEX2; chatbot to engage your website visitors
  title_abbrev: Building an &LEX2; chatbot
  synopsis: create a chatbot to engage your website visitors.
  languages:
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_Lex_Java_block.xml
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_Lex_JavaScript_block.xml
  service_main: lex
  services:
    lex:
    translate:
    comprehend:
cross_DynamoDBDataTracker:
  title: Create a web application to track &DDB; data
  title_abbrev: Create a web application to track &DDB; data
  synopsis: create a web application that tracks work items in an &DDBlong; table and uses &SESlong; (&SES;) to send reports.
  languages:
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_DynamoDBDataTracker_Java_block.xml
    .NET:
      versions:
        - sdk_version: 3
          github: dotnetv3/cross-service/DynamoDbItemTracker
          block_content: cross_DynamoDBDataTracker_Net_block.xml
    Kotlin:
      versions:
        - sdk_version: 1
          block_content: cross_DynamoDBDataTracker_Kotlin_block.xml
    Python:
      versions:
        - sdk_version: 3
          github: python/cross_service/dynamodb_item_tracker
          block_content: cross_DynamoDBDataTracker_Python_block.xml
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_DynamoDBDataTracker_JavaScript_block.xml
  service_main: dynamodb
  services:
    dynamodb:
    ses:
cross_ApiGatewayDataTracker:
  title: Create an &ABP; REST API to track COVID-19 data
  title_abbrev: Create a REST API to track COVID-19 data
  synopsis: create a REST API that simulates a system to track daily cases of COVID-19 in the United States, using fictional
    data.
  languages:
    Python:
      versions:
        - sdk_version: 3
          github: python/cross_service/apigateway_covid-19_tracker
          block_content: cross_ApiGatewayDataTracker_Python_block.xml
  service_main: api-gateway
  services:
    api-gateway:
    cloudformation:
    dynamodb:
    lambda:
cross_ApiGatewayWebsocketChat:
  title: Create a websocket chat application with &ABP;
  title_abbrev: Create a websocket chat application
  synopsis: create a chat application that is served by a websocket API built on &ABPlong;.
  languages:
    Python:
      versions:
        - sdk_version: 3
          github: python/cross_service/apigateway_websocket_chat
          block_content: cross_ApiGatewayWebsocketChat_Python_block.xml
  service_main: api-gateway
  services:
    api-gateway:
    dynamodb:
    lambda:
cross_AuroraRestLendingLibrary:
  title: Create a lending library REST API
  title_abbrev: Create a lending library REST API
  synopsis: create a lending library where patrons can borrow and return books by using a REST API backed by an &AURlong;
    database.
  languages:
    Python:
      versions:
        - sdk_version: 3
          github: python/cross_service/aurora_rest_lending_library
          block_content: cross_AuroraRestLendingLibrary_Python_block.xml
  service_main: aurora
  services:
    api-gateway:
    aurora:
    lambda:
    secrets-manager:
cross_StepFunctionsMessenger:
  title: Create a messenger application with &SFN;
  title_abbrev: Create a messenger application
  synopsis: create an &SFNlong; messenger application that retrieves message records from a database table.
  languages:
    Python:
      versions:
        - sdk_version: 3
          github: python/cross_service/stepfunctions_messenger
          block_content: cross_StepFunctionsMessenger_Python_block.xml
  service_main: sfn
  services:
    dynamodb:
    lambda:
    sqs:
    sfn:
cross_TextractExplorer:
  title: Create an &TEXTRACT; explorer application
  title_abbrev: Create an &TEXTRACT; explorer application
  synopsis: explore &TEXTRACTlong; output through an interactive application.
  languages:
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_TextractExplorer_JavaScript_block.xml
          add_services:
            cognito-identity:
    Python:
      versions:
        - sdk_version: 3
          github: python/cross_service/textract_explorer
          block_content: cross_TextractExplorer_Python_block.xml
  service_main: textract
  services:
    s3:
    sns:
    sqs:
    textract:
cross_TextractComprehendDetectEntities:
  title: Detect entities in text extracted from an image using an &AWS; SDK
  title_abbrev: Detect entities in text extracted from an image
  synopsis: use &CMP; to detect entities in text extracted by &TEXTRACT; from an image that is stored in &S3;.
  category:
  languages:
    Python:
      versions:
        - sdk_version: 3
          github: python/cross_service/textract_comprehend_notebook
          block_content: cross_TextractComprehendDetectEntities_Python_block.xml
  service_main: textract
  services:
    comprehend:
    s3:
    textract:
cross_SubmitDataApp:
  title: Build an application to submit data to a &DDB; table
  title_abbrev: Build an app to submit data to a &DDB; table
  synopsis: build an application that submits data to an &DDBlong; table and notifies you when a user updates the table.
  languages:
    Kotlin:
      versions:
        - sdk_version: 1
          block_content: cross_Android_Kotlin_block.xml
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_FirstJavaApp_Java_block.xml
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_SubmitDataApp_JavaScript_block.xml
  service_main: dynamodb
  services:
    dynamodb:
    sns:
cross_LambdaAPIGateway:
  title: Use &ABP; to invoke a &LAM; function
  title_abbrev: Use &ABP; to invoke a &LAM; function
  synopsis: create an &LAMlong; function invoked by &ABPlong;.
  languages:
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_LambdaAPIGateway_Java_block.xml
          add_services:
            dynamodb:
            sns:
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_LambdaAPIGateway_JavaScript_block.xml
          add_services:
            dynamodb:
            sns:
    Python:
      versions:
        - sdk_version: 3
          github: python/example_code/lambda
          block_content: cross_LambdaAPIGateway_Python_block.xml
  service_main: lambda
  services:
    api-gateway:
    lambda:
cross_LambdaScheduledEvents:
  title: Use scheduled events to invoke a &LAM; function
  title_abbrev: Use scheduled events to invoke a &LAM; function
  synopsis: create an &LAMlong; function invoked by an &EVlong; scheduled event.
  languages:
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_LambdaScheduledEvents_Java_block.xml
          add_services:
            dynamodb:
            sns:
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_LambdaScheduledEvents_JavaScript_block.xml
          add_services:
            dynamodb:
            sns:
    Python:
      versions:
        - sdk_version: 3
          github: python/example_code/lambda
          block_content: cross_LambdaScheduledEvents_Python_block.xml
          add_services:
            cloudwatch-logs:
  service_main: lambda
  services:
    eventbridge:
    lambda:
cross_ServerlessWorkflows:
  title: Use &SFN; to invoke &LAM; functions
  title_abbrev: Use &SFN; to invoke &LAM; functions
  synopsis: create an &SFNlong; state machine that invokes &LAMlong; functions in sequence.
  languages:
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_ServerlessWorkflows_Java_block.xml
    JavaScript:
      versions:
        - sdk_version: 3
          github: javascriptv3/example_code/cross-services/lambda-step-functions
          block_content: cross_ServerlessWorkflows_JavaScript_block.xml
  service_main: sfn
  services:
    dynamodb:
    lambda:
    ses:
    sfn:
cross_TranscriptionApp:
  title: Build an &TSC; app
  title_abbrev: Build an &TSC; app
  synopsis: use &TSClong; to transcribe and display voice recordings in the browser.
  languages:
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_TranscriptionApp_JavaScript_block.xml
  service_main: transcribe
  services:
    cognito-identity:
    s3:
    transcribe:
cross_TranscriptionStreamingApp:
  title: Build an &TSC; streaming app
  title_abbrev: Build an &TSC; streaming app
  synopsis: build an app that records, transcribes, and translates live audio in real-time, and emails the results.
  languages:
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_TranscriptionStreamingApp_JavaScript_block.xml
  service_main: transcribe
  services:
    translate:
    comprehend:
    transcribe:
    ses:
cross_RekognitionPhotoAnalyzerPPE:
  title: Detect PPE in images with &REK; using an &AWS; SDK
  title_abbrev: Detect PPE in images
  synopsis: build an app that uses &REK; to detect Personal Protective Equipment (PPE) in images.
  languages:
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_RekognitionLambdPPE_Java_block.xml
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_RekognitionPhotoAnalyzerPPE_JavaScript_block.xml
  service_main: rekognition
  services:
    rekognition:
    s3:
    dynamodb:
    ses:
cross_RekognitionPhotoAnalyzer:
  title: Detect objects in images with &REK; using an &AWS; SDK
  title_abbrev: Detect objects in images
  synopsis: build an app that uses &REK; to detect objects by category in images.
  languages:
    Kotlin:
      versions:
        - sdk_version: 1
          block_content: cross_RekognitionPhotoAnalyzer_Kotlin_block.xml
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_RekognitionPhotoAnalyzer_Java_block.xml
    .NET:
      versions:
        - sdk_version: 3
          github: dotnetv3/cross-service/PhotoAnalyzerApp
          block_content: cross_RekognitionPhotoAnalyzer_Net_block.xml
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_RekognitionPhotoAnalyzer_JavaScript_block.xml
    Python:
      versions:
        - sdk_version: 3
          github: python/cross_service/photo_analyzer
          block_content: cross_RekognitionPhotoAnalyzer_Python_block.xml
  service_main: rekognition
  services:
    rekognition:
    s3:
    ses:
cross_RekognitionVideoDetection:
  title: Detect people and objects in a video with &REK; using an &AWS; SDK
  title_abbrev: Detect people and objects in a video
  synopsis: detect people and objects in a video with &REK;.
  category: Cross-service examples
  languages:
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_RekognitionVideoAnalyzer_Java_block.xml
          add_services:
            s3:
            ses:
    JavaScript:
      versions:
        - sdk_version: 3
          block_content: cross_RekognitionVideoAnalyzer_JavaScript_block.xml
          add_services:
            s3:
            ses:
    Python:
      versions:
        - sdk_version: 3
          github: python/example_code/rekognition
          block_content: cross_RekognitionVideoDetection_Python_block.xml
          add_services:
            sns:
            sqs:
  service_main: rekognition
  services:
    rekognition:
cross_DetectFaces:
  title: Detect faces in an image using an &AWS; SDK
  title_abbrev: Detect faces in an image
  synopsis_list:
    - Save an image in an &S3; bucket.
    - Use &REKlong; to detect facial details, such as age range, gender, and emotion (such as smiling).
    - Display those details.
  languages:
    Rust:
      versions:
        - sdk_version: 1
          block_content: cross_detect_faces_rust_block.xml
  service_main: rekognition
  services:
    rekognition: {}
    s3: {}
cross_DetectLabels:
  title: Save EXIF and other image information using an &AWS; SDK
  title_abbrev: Save EXIF and other image information
  synopsis_list:
    - Get EXIF information from a a JPG, JPEG, or PNG file.
    - Upload the image file to an &S3; bucket.
    - Use &REKlong; to identify the three top attributes (labels) in the file.
    - Add the EXIF and label information to an &DDBlong; table in the Region.
  languages:
    Rust:
      versions:
        - sdk_version: 1
          block_content: cross_detect_labels_rust_block.xml
  service_main: rekognition
  services:
    dynamodb: {}
    rekognition: {}
    s3: {}
cross_Telephone:
  title: Convert text to speech and back to text using an &AWS; SDK
  title_abbrev: Convert text to speech and back to text
  synopsis_list:
    - Use &POLlong; to synthesize a plain text (UTF-8) input file to an audio file.
    - Upload the audio file to an &S3; bucket.
    - Use &TSClong; to convert the audio file to text.
    - Display the text.
  languages:
    Rust:
      versions:
        - sdk_version: 1
          block_content: cross_telephone_rust_block.xml
  service_main: polly
  services:
    polly: {}
    s3: {}
    transcribe: {}
cross_LambdaForBrowser:
  title: Invoke a &LAM; function from a browser
  title_abbrev: Invoke a &LAM; function from a browser
  synopsis: invoke an &LAMlong; function from a browser.
  languages:
    JavaScript:
      versions:
        - sdk_version: 2
          block_content: cross_LambdaForBrowser_JavaScript_block.xml
        - sdk_version: 3
          block_content: cross_LambdaForBrowser_JavaScriptV3_block.xml
  service_main: lambda
  services:
    lambda:
    dynamodb:
cross_ResilientService:
  title: Build and manage a resilient service using an &AWS; SDK
  title_abbrev: Build and manage a resilient service
  synopsis: create a load-balanced web service that returns book, movie, and song recommendations. The example shows how the
    service responds to failures, and how to restructure the service for more resilience when failures occur.
  synopsis_list:
    - Use an &ASlong; group to create &EC2long; (&EC2;) instances based on a launch template and to keep the number of instances
      in a specified range.
    - Handle and distribute HTTP requests with &ELBlong;.
    - Monitor the health of instances in an Auto Scaling group and forward requests only to healthy instances.
    - Run a Python web server on each EC2 instance to handle HTTP requests. The web server responds with recommendations and
      health checks.
    - Simulate a recommendation service with an &DDBlong; table.
    - Control web server response to requests and health checks by updating &SYSlong; parameters.
  category: Scenarios
  languages:
    .NET:
      versions:
        - sdk_version: 3
          github: dotnetv3/cross-service/ResilientService
          excerpts:
            - description: Run the interactive scenario at a command prompt.
              snippet_tags:
                - ResilientService.dotnetv3.Scenario
            - description: Create a class that wraps &AS; and &EC2; actions.
              snippet_tags:
                - ResilientService.dotnetv3.AutoScalerWrapper
            - description: Create a class that wraps &ELB; actions.
              snippet_tags:
                - ResilientService.dotnetv3.ELB.ElasticLoadBalancerWrapper
            - description: Create a class that uses &DDB; to simulate a recommendation service.
              snippet_tags:
                - ResilientService.dotnetv3.RecommendationService
            - description: Create a class that wraps &SYS; actions.
              snippet_tags:
                - ResilientService.dotnetv3.SmParameterWrapper
    Java:
      versions:
        - sdk_version: 2
          github: javav2/usecases/resilient_service
          excerpts:
            - description: Run the interactive scenario at a command prompt.
              snippet_tags:
                - javav2.example_code.workflow.ResilientService_Runner
            - description: Create a class that wraps &AS; and &EC2; actions.
              snippet_tags:
                - javav2.example_code.workflow.ResilientService_AutoScaler
            - description: Create a class that wraps &ELB; actions.
              snippet_tags:
                - javav2.example_code.workflow.ResilientService_LoadBalancer
            - description: Create a class that uses &DDB; to simulate a recommendation service.
              snippet_tags:
                - javav2.example_code.workflow.ResilientService_RecommendationService
            - description: Create a class that wraps &SYS; actions.
              snippet_tags:
                - javav2.example_code.workflow.ResilientService_ParameterHelper
    Python:
      versions:
        - sdk_version: 3
          github: python/cross_service/resilient_service
          excerpts:
            - description: Run the interactive scenario at a command prompt.
              snippet_tags:
                - python.example_code.workflow.ResilientService_Runner
            - description: Create a class that wraps &AS; and &EC2; actions.
              snippet_tags:
                - python.example_code.workflow.ResilientService_AutoScaler
            - description: Create a class that wraps &ELB; actions.
              snippet_tags:
                - python.example_code.workflow.ResilientService_LoadBalancer
            - description: Create a class that uses &DDB; to simulate a recommendation service.
              snippet_tags:
                - python.example_code.workflow.ResilientService_RecommendationService
            - description: Create a class that wraps &SYS; actions.
              snippet_tags:
                - python.example_code.workflow.ResilientService_ParameterHelper
    JavaScript:
      versions:
        - sdk_version: 3
          github: javascriptv3/example_code/cross-services/wkflw-resilient-service
          excerpts:
            - description: Run the interactive scenario at a command prompt.
              snippet_files:
                - javascriptv3/example_code/cross-services/wkflw-resilient-service/index.js
            - description: Create steps to deploy all of the resources.
              snippet_files:
                - javascriptv3/example_code/cross-services/wkflw-resilient-service/steps-deploy.js
            - description: Create steps to run the demo.
              snippet_files:
                - javascriptv3/example_code/cross-services/wkflw-resilient-service/steps-demo.js
            - description: Create steps to destroy all of the resources.
              snippet_files:
                - javascriptv3/example_code/cross-services/wkflw-resilient-service/steps-destroy.js
  services:
    auto-scaling: {CreateAutoScalingGroup, DescribeAutoScalingGroups, TerminateInstanceInAutoScalingGroup, AttachLoadBalancerTargetGroups,
                   DeleteAutoScalingGroup, UpdateAutoScalingGroup}
    ec2: {DescribeIamInstanceProfileAssociations, ReplaceIamInstanceProfileAssociation, RebootInstances, CreateLaunchTemplate,
          DeleteLaunchTemplate, DescribeAvailabilityZones, DescribeInstances, DescribeVpcs, DescribeSubnets}
    elastic-load-balancing-v2: {DescribeLoadBalancers, CreateTargetGroup, DescribeTargetGroups, DeleteTargetGroup, CreateLoadBalancer,
                                CreateListener, DeleteLoadBalancer, DescribeTargetHealth}
    iam: {CreateInstanceProfile, DeleteInstanceProfile}
cross_FMPlayground:
  title: Create a sample application that offers playgrounds to interact with &BR; foundation models using an &AWS; SDK
  title_abbrev: Create a playground application to interact with &BR; foundation models
  synopsis: create playgrounds to interact with &BR; foundation models through different modalities.
  category: Scenarios
  languages:
    .NET:
      versions:
        - sdk_version: 3
          block_content: cross_FMPlayground_NetV3_block.xml
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_FMPlayground_Java_block.xml
    Python:
      versions:
        - sdk_version: 3
          block_content: cross_FMPlayground_Python_block.xml
  service_main: bedrock-runtime
  services:
    bedrock-runtime:
cross_Testing:
  title: Example approaches for unit and integration testing with an &AWS; SDK
  title_abbrev: Unit and integration test with an SDK
  synopsis: examples for best-practice techniques when writing unit and integration tests using an &AWS; SDK.
  category: Scenarios
  languages:
    Rust:
      versions:
        - sdk_version: 1
          github: rustv1/examples/testing
          excerpts:
            - description: Cargo.toml for testing examples.
              snippet_files:
                - rustv1/examples/testing/Cargo.toml
            - description: Unit testing example using automock and a service wrapper.
              snippet_files:
                - rustv1/examples/testing/src/wrapper.rs
            - description: Integration testing example using StaticReplayClient.
              snippet_files:
                - rustv1/examples/testing/src/replay.rs
  services:
    s3:
cross_ServerlessPromptChaining:
  title: Build and orchestrate generative AI applications with &BR; and &SFN;
  title_abbrev: Orchestrate generative AI applications with &SFN;
  synopsis: build and orchestrate generative AI applications with &BR; and &SFN;.
  category: Scenarios
  languages:
    Python:
      versions:
        - sdk_version: 3
          block_content: cross_ServerlessPromptChaining_Python_block.xml
  service_main: bedrock
  services:
    bedrock:
    bedrock-runtime:
    bedrock-agent:
    bedrock-agent-runtime:
    sfn:
cross_ServerlessS3DataTransformation:
  title: Transform data for your application with S3 Object Lambda
  title_abbrev: Transform data with S3 Object Lambda
  synopsis: transform data for your application with S3 Object Lambda.
  category: Cross-service examples
  languages:
    .NET:
      versions:
        - sdk_version: 3
          github: dotnetv3/cross-service/S3ObjectLambdaFunction
          block_content: cross_S3ObjectLambdaFunction.xml
  service_main: s3
  services:
    s3:
    lambda:
cross_CognitoAutoConfirmUser:
  title: Automatically confirm known &COG; users with a &LAM; function using an &AWS; SDK
  title_abbrev: Automatically confirm known users with a &LAM; function
  synopsis: automatically confirm known &COG; users with a &LAM; function.
  synopsis_list:
    - Configure a user pool to call a &LAM; function for the <code>PreSignUp</code> trigger.
    - Sign up a user with &COG;.
    - The &LAM; function scans a &DDB; table and automatically confirms known users.
    - Sign in as the new user, then clean up resources.
  category: Scenarios
  languages:
    Go:
      versions:
        - sdk_version: 2
          github: gov2/workflows/user_pools_and_lambda_triggers
          sdkguide:
          excerpts:
            - description: Run an interactive scenario at a command prompt.
              snippet_tags:
                - gov2.workflows.PoolsAndTriggers.AutoConfirm
            - description: Handle the <code>PreSignUp</code> trigger with a &LAM; function.
              snippet_tags:
                - gov2.lambda.AutoConfirmHandler
            - description: Create a struct that performs common tasks.
              snippet_tags:
                - gov2.workflows.PoolsAndTriggers.ScenarioHelper
            - description: Create a struct that wraps &COG; actions.
              snippet_tags:
                - gov2.cognito-identity-provider.CognitoActions.complete
            - description: Create a struct that wraps &DDB; actions.
              snippet_tags:
                - gov2.dynamodb.DynamoActions.complete
            - description: Create a struct that wraps &CWL; actions.
              snippet_tags:
                - gov2.cloudwatch-logs.CloudWatchLogsActions.complete
            - description: Create a struct that wraps &CFN; actions.
              snippet_tags:
                - gov2.cloudformation.CloudFormationActions.complete
            - description: Clean up resources.
              snippet_tags:
                - gov2.cognito-identity-provider.Resources.complete
  services:
    cognito-identity-provider: {UpdateUserPool, SignUp, InitiateAuth, DeleteUser}
    lambda: {}
cross_CognitoAutoMigrateUser:
  title: Automatically migrate known &COG; users with a &LAM; function using an &AWS; SDK
  title_abbrev: Automatically migrate known users with a &LAM; function
  synopsis: automatically migrate known &COG; users with a &LAM; function.
  synopsis_list:
    - Configure a user pool to call a &LAM; function for the <code>MigrateUser</code> trigger.
    - Sign in to &COG; with a username and email that is not in the user pool.
    - The &LAM; function scans a &DDB; table and automatically migrates known users to the user pool.
    - Perform the forgot password flow to reset the password for the migrated user.
    - Sign in as the new user, then clean up resources.
  category: Scenarios
  languages:
    Go:
      versions:
        - sdk_version: 2
          github: gov2/workflows/user_pools_and_lambda_triggers
          sdkguide:
          excerpts:
            - description: Run an interactive scenario at a command prompt.
              snippet_tags:
                - gov2.workflows.PoolsAndTriggers.MigrateUser
            - description: Handle the <code>MigrateUser</code> trigger with a &LAM; function.
              snippet_tags:
                - gov2.lambda.MigrateUserHandler
            - description: Create a struct that performs common tasks.
              snippet_tags:
                - gov2.workflows.PoolsAndTriggers.ScenarioHelper
            - description: Create a struct that wraps &COG; actions.
              snippet_tags:
                - gov2.cognito-identity-provider.CognitoActions.complete
            - description: Create a struct that wraps &DDB; actions.
              snippet_tags:
                - gov2.dynamodb.DynamoActions.complete
            - description: Create a struct that wraps &CWL; actions.
              snippet_tags:
                - gov2.cloudwatch-logs.CloudWatchLogsActions.complete
            - description: Create a struct that wraps &CFN; actions.
              snippet_tags:
                - gov2.cloudformation.CloudFormationActions.complete
            - description: Clean up resources.
              snippet_tags:
                - gov2.cognito-identity-provider.Resources.complete
  services:
    cognito-identity-provider: {UpdateUserPool, SignUp, InitiateAuth, ForgotPassword, ConfirmForgotPassword, DeleteUser}
    lambda: {}
cross_CognitoCustomActivityLog:
  title: Write custom activity data with a &LAM; function after &COG; user authentication using an &AWS; SDK
  title_abbrev: Write custom activity data with a &LAM; function after &COG; user authentication
  synopsis: write custom activity data with a &LAM; function after &COG; user authentication.
  synopsis_list:
    - Use administrator functions to add a user to a user pool.
    - Configure a user pool to call a &LAM; function for the <code>PostAuthentication</code> trigger.
    - Sign the new user in to &COG;.
    - The &LAM; function writes custom information to &CWL; and to an &DDB; table.
    - Get and display custom data from the &DDB; table, then clean up resources.
  category: Scenarios
  languages:
    Go:
      versions:
        - sdk_version: 2
          github: gov2/workflows/user_pools_and_lambda_triggers
          sdkguide:
          excerpts:
            - description: Run an interactive scenario at a command prompt.
              snippet_tags:
                - gov2.workflows.PoolsAndTriggers.ActivityLog
            - description: Handle the <code>PostAuthentication</code> trigger with a &LAM; function.
              snippet_tags:
                - gov2.lambda.ActivityLogHandler
            - description: Create a struct that performs common tasks.
              snippet_tags:
                - gov2.workflows.PoolsAndTriggers.ScenarioHelper
            - description: Create a struct that wraps &COG; actions.
              snippet_tags:
                - gov2.cognito-identity-provider.CognitoActions.complete
            - description: Create a struct that wraps &DDB; actions.
              snippet_tags:
                - gov2.dynamodb.DynamoActions.complete
            - description: Create a struct that wraps &CWL; actions.
              snippet_tags:
                - gov2.cloudwatch-logs.CloudWatchLogsActions.complete
            - description: Create a struct that wraps &CFN; actions.
              snippet_tags:
                - gov2.cloudformation.CloudFormationActions.complete
            - description: Clean up resources.
              snippet_tags:
                - gov2.cognito-identity-provider.Resources.complete
  services:
    cognito-identity-provider: {UpdateUserPool, InitiateAuth, DeleteUser, AdminCreateUser, AdminSetUserPassword}
    lambda: {}
cross_MonitorDynamoDB:
  title: Monitor performance of &DDBlong; using an &AWS; SDK
  title_abbrev: Monitor &DDB; performance
  synopsis: configure an application's use of &DDB; to monitor performance.
  languages:
    Java:
      versions:
        - sdk_version: 2
          block_content: cross_MonitorDynamoDB_Java_block.xml
  service_main: dynamodb
  services:
    dynamodb:
    cloudwatch:
